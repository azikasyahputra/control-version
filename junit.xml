<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="C:\Users\azika\Documents\Project PHP\control-version\phpunit.xml" tests="20" assertions="54" errors="0" failures="0" skipped="0" time="2.914780">
    <testsuite name="Unit" tests="9" assertions="19" errors="0" failures="0" skipped="0" time="1.458359">
      <testsuite name="Tests\Unit\ExampleTest" file="tests\Unit\ExampleTest.php" tests="1" assertions="1" errors="0" failures="0" skipped="0" time="0.022763">
        <testcase name="that true is true" file="tests\Unit\ExampleTest.php::that true is true" class="Tests\Unit\ExampleTest" classname="Tests.Unit.ExampleTest" assertions="1" time="0.022763"/>
      </testsuite>
      <testsuite name="Tests\Unit\VersionTest" file="Version (Tests\Unit\Version)" tests="8" assertions="18" errors="0" failures="0" skipped="0" time="1.435596">
        <testsuite name="Tests\Unit\VersionTest::store_version_dto_can_be_created_from_valid_data" tests="2" assertions="6" errors="0" failures="0" skipped="0" time="0.648720">
          <testcase name="Store version dto can be created from valid data with data set &quot;plain string value&quot;" file="Version (Tests\Unit\Version)::Store version dto can be created from valid data with data set &quot;plain string value&quot;" class="Tests\Unit\VersionTest" classname="Tests.Unit.VersionTest" assertions="3" time="0.516137"/>
          <testcase name="Store version dto can be created from valid data with data set &quot;json string value&quot;" file="Version (Tests\Unit\Version)::Store version dto can be created from valid data with data set &quot;json string value&quot;" class="Tests\Unit\VersionTest" classname="Tests.Unit.VersionTest" assertions="3" time="0.132583"/>
        </testsuite>
        <testsuite name="Tests\Unit\VersionTest::store_version_dto_throws_exception_for_invalid_data" tests="4" assertions="8" errors="0" failures="0" skipped="0" time="0.536534">
          <testcase name="Store version dto throws exception for invalid data with data set &quot;missing key&quot;" file="Version (Tests\Unit\Version)::Store version dto throws exception for invalid data with data set &quot;missing key&quot;" class="Tests\Unit\VersionTest" classname="Tests.Unit.VersionTest" assertions="2" time="0.174256"/>
          <testcase name="Store version dto throws exception for invalid data with data set &quot;missing value&quot;" file="Version (Tests\Unit\Version)::Store version dto throws exception for invalid data with data set &quot;missing value&quot;" class="Tests\Unit\VersionTest" classname="Tests.Unit.VersionTest" assertions="2" time="0.120479"/>
          <testcase name="Store version dto throws exception for invalid data with data set &quot;key is not a string&quot;" file="Version (Tests\Unit\Version)::Store version dto throws exception for invalid data with data set &quot;key is not a string&quot;" class="Tests\Unit\VersionTest" classname="Tests.Unit.VersionTest" assertions="2" time="0.116619"/>
          <testcase name="Store version dto throws exception for invalid data with data set &quot;value is not string or array&quot;" file="Version (Tests\Unit\Version)::Store version dto throws exception for invalid data with data set &quot;value is not string or array&quot;" class="Tests\Unit\VersionTest" classname="Tests.Unit.VersionTest" assertions="2" time="0.125180"/>
        </testsuite>
        <testcase name="Version repository find method returns record without timestamp" file="Version (Tests\Unit\Version)::Version repository find method returns record without timestamp" class="Tests\Unit\VersionTest" classname="Tests.Unit.VersionTest" assertions="2" time="0.133097"/>
        <testcase name="Version repository find method returns record with timestamp" file="Version (Tests\Unit\Version)::Version repository find method returns record with timestamp" class="Tests\Unit\VersionTest" classname="Tests.Unit.VersionTest" assertions="2" time="0.117244"/>
      </testsuite>
    </testsuite>
    <testsuite name="Feature" tests="11" assertions="35" errors="0" failures="0" skipped="0" time="1.456422">
      <testsuite name="Tests\Feature\ExampleTest" file="tests\Feature\ExampleTest.php" tests="1" assertions="1" errors="0" failures="0" skipped="0" time="0.202997">
        <testcase name="it returns a successful response" file="tests\Feature\ExampleTest.php::it returns a successful response" class="Tests\Feature\ExampleTest" classname="Tests.Feature.ExampleTest" assertions="1" time="0.202997"/>
      </testsuite>
      <testsuite name="Tests\Feature\VersionApiTest" file="Version Api (Tests\Feature\VersionApi)" tests="10" assertions="34" errors="0" failures="0" skipped="0" time="1.253424">
        <testcase name="It can store a new version with a string value" file="Version Api (Tests\Feature\VersionApi)::It can store a new version with a string value" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="3" time="0.144869"/>
        <testcase name="It can store a new version with a json value" file="Version Api (Tests\Feature\VersionApi)::It can store a new version with a json value" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="3" time="0.120291"/>
        <testcase name="It can store a new version with a array value" file="Version Api (Tests\Feature\VersionApi)::It can store a new version with a array value" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="3" time="0.122356"/>
        <testcase name="It fails to store if body has more than one key" file="Version Api (Tests\Feature\VersionApi)::It fails to store if body has more than one key" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="3" time="0.119746"/>
        <testcase name="It returns a validation error for an invalid payload" file="Version Api (Tests\Feature\VersionApi)::It returns a validation error for an invalid payload" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="3" time="0.127571"/>
        <testcase name="It can get the version for a key" file="Version Api (Tests\Feature\VersionApi)::It can get the version for a key" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="2" time="0.124698"/>
        <testcase name="It can get the version for a key and timestamp" file="Version Api (Tests\Feature\VersionApi)::It can get the version for a key and timestamp" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="2" time="0.124781"/>
        <testcase name="It can get the version for a key and invalid timestamp" file="Version Api (Tests\Feature\VersionApi)::It can get the version for a key and invalid timestamp" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="1" time="0.124441"/>
        <testcase name="It returns 404 if no version is found for a key" file="Version Api (Tests\Feature\VersionApi)::It returns 404 if no version is found for a key" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="1" time="0.111857"/>
        <testcase name="It can get all version records" file="Version Api (Tests\Feature\VersionApi)::It can get all version records" class="Tests\Feature\VersionApiTest" classname="Tests.Feature.VersionApiTest" assertions="13" time="0.132815"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
