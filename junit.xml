<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="C:\Users\azika\Documents\Project PHP\control-version\phpunit.xml" tests="55" assertions="115" errors="0" failures="0" skipped="0" time="33.887103">
    <testsuite name="Unit" tests="43" assertions="79" errors="0" failures="0" skipped="0" time="28.915016">
      <testsuite name="Tests\Feature\Http\Requests\DynamicKeyStoreRequestTest" file="Dynamic Key Store Request (Tests\Feature\Http\Requests\DynamicKeyStoreRequest)" tests="4" assertions="12" errors="0" failures="0" skipped="0" time="11.131668">
        <testsuite name="Tests\Feature\Http\Requests\DynamicKeyStoreRequestTest::it_validates_the_request_body" tests="4" assertions="12" errors="0" failures="0" skipped="0" time="11.131668">
          <testcase name="It validates the request body with data set &quot;valid: single key-value pair&quot;" file="Dynamic Key Store Request (Tests\Feature\Http\Requests\DynamicKeyStoreRequest)::It validates the request body with data set &quot;valid: single key-value pair&quot;" class="Tests\Feature\Http\Requests\DynamicKeyStoreRequestTest" classname="Tests.Feature.Http.Requests.DynamicKeyStoreRequestTest" assertions="3" time="9.842418"/>
          <testcase name="It validates the request body with data set &quot;valid: single key with JSON object value&quot;" file="Dynamic Key Store Request (Tests\Feature\Http\Requests\DynamicKeyStoreRequest)::It validates the request body with data set &quot;valid: single key with JSON object value&quot;" class="Tests\Feature\Http\Requests\DynamicKeyStoreRequestTest" classname="Tests.Feature.Http.Requests.DynamicKeyStoreRequestTest" assertions="3" time="0.412855"/>
          <testcase name="It validates the request body with data set &quot;invalid: empty JSON object&quot;" file="Dynamic Key Store Request (Tests\Feature\Http\Requests\DynamicKeyStoreRequest)::It validates the request body with data set &quot;invalid: empty JSON object&quot;" class="Tests\Feature\Http\Requests\DynamicKeyStoreRequestTest" classname="Tests.Feature.Http.Requests.DynamicKeyStoreRequestTest" assertions="3" time="0.513590"/>
          <testcase name="It validates the request body with data set &quot;invalid: multiple key-value pairs&quot;" file="Dynamic Key Store Request (Tests\Feature\Http\Requests\DynamicKeyStoreRequest)::It validates the request body with data set &quot;invalid: multiple key-value pairs&quot;" class="Tests\Feature\Http\Requests\DynamicKeyStoreRequestTest" classname="Tests.Feature.Http.Requests.DynamicKeyStoreRequestTest" assertions="3" time="0.362805"/>
        </testsuite>
      </testsuite>
      <testsuite name="Tests\Unit\Data\GetObjectDataTest" file="Get Object Data (Tests\Unit\Data\GetObjectData)" tests="3" assertions="7" errors="0" failures="0" skipped="0" time="1.553898">
        <testcase name="It can be instantiated from a request with valid data" file="Get Object Data (Tests\Unit\Data\GetObjectData)::It can be instantiated from a request with valid data" class="Tests\Unit\Data\GetObjectDataTest" classname="Tests.Unit.Data.GetObjectDataTest" assertions="3" time="0.730366"/>
        <testcase name="It can be instantiated from a request without a timestamp" file="Get Object Data (Tests\Unit\Data\GetObjectData)::It can be instantiated from a request without a timestamp" class="Tests\Unit\Data\GetObjectDataTest" classname="Tests.Unit.Data.GetObjectDataTest" assertions="3" time="0.426785"/>
        <testcase name="It throws validation exception for invalid timestamp" file="Get Object Data (Tests\Unit\Data\GetObjectData)::It throws validation exception for invalid timestamp" class="Tests\Unit\Data\GetObjectDataTest" classname="Tests.Unit.Data.GetObjectDataTest" assertions="1" time="0.396747"/>
      </testsuite>
      <testsuite name="Tests\Unit\Rules\IsStringOrJsonTest" file="Is String Or Json (Tests\Unit\Rules\IsStringOrJson)" tests="7" assertions="7" errors="0" failures="0" skipped="0" time="2.633280">
        <testsuite name="Tests\Unit\Rules\IsStringOrJsonTest::it_validates_strings_and_arrays_correctly" tests="6" assertions="6" errors="0" failures="0" skipped="0" time="2.288618">
          <testcase name="It validates strings and arrays correctly with data set &quot;valid string&quot;" file="Is String Or Json (Tests\Unit\Rules\IsStringOrJson)::It validates strings and arrays correctly with data set &quot;valid string&quot;" class="Tests\Unit\Rules\IsStringOrJsonTest" classname="Tests.Unit.Rules.IsStringOrJsonTest" assertions="1" time="0.450799"/>
          <testcase name="It validates strings and arrays correctly with data set &quot;valid array&quot;" file="Is String Or Json (Tests\Unit\Rules\IsStringOrJson)::It validates strings and arrays correctly with data set &quot;valid array&quot;" class="Tests\Unit\Rules\IsStringOrJsonTest" classname="Tests.Unit.Rules.IsStringOrJsonTest" assertions="1" time="0.351301"/>
          <testcase name="It validates strings and arrays correctly with data set &quot;invalid integer&quot;" file="Is String Or Json (Tests\Unit\Rules\IsStringOrJson)::It validates strings and arrays correctly with data set &quot;invalid integer&quot;" class="Tests\Unit\Rules\IsStringOrJsonTest" classname="Tests.Unit.Rules.IsStringOrJsonTest" assertions="1" time="0.359496"/>
          <testcase name="It validates strings and arrays correctly with data set &quot;invalid boolean&quot;" file="Is String Or Json (Tests\Unit\Rules\IsStringOrJson)::It validates strings and arrays correctly with data set &quot;invalid boolean&quot;" class="Tests\Unit\Rules\IsStringOrJsonTest" classname="Tests.Unit.Rules.IsStringOrJsonTest" assertions="1" time="0.356329"/>
          <testcase name="It validates strings and arrays correctly with data set &quot;invalid object&quot;" file="Is String Or Json (Tests\Unit\Rules\IsStringOrJson)::It validates strings and arrays correctly with data set &quot;invalid object&quot;" class="Tests\Unit\Rules\IsStringOrJsonTest" classname="Tests.Unit.Rules.IsStringOrJsonTest" assertions="1" time="0.375570"/>
          <testcase name="It validates strings and arrays correctly with data set &quot;invalid null&quot;" file="Is String Or Json (Tests\Unit\Rules\IsStringOrJson)::It validates strings and arrays correctly with data set &quot;invalid null&quot;" class="Tests\Unit\Rules\IsStringOrJsonTest" classname="Tests.Unit.Rules.IsStringOrJsonTest" assertions="1" time="0.395123"/>
        </testsuite>
        <testcase name="Message returns the correct validation error string" file="Is String Or Json (Tests\Unit\Rules\IsStringOrJson)::Message returns the correct validation error string" class="Tests\Unit\Rules\IsStringOrJsonTest" classname="Tests.Unit.Rules.IsStringOrJsonTest" assertions="1" time="0.344661"/>
      </testsuite>
      <testsuite name="Tests\Unit\Http\Controllers\ObjectControllerTest" file="Object Controller (Tests\Unit\Http\Controllers\ObjectController)" tests="7" assertions="15" errors="0" failures="0" skipped="0" time="3.939657">
        <testcase name="Index returns all version data successfully" file="Object Controller (Tests\Unit\Http\Controllers\ObjectController)::Index returns all version data successfully" class="Tests\Unit\Http\Controllers\ObjectControllerTest" classname="Tests.Unit.Http.Controllers.ObjectControllerTest" assertions="2" time="1.362396"/>
        <testcase name="Index returns 404 when no data is found" file="Object Controller (Tests\Unit\Http\Controllers\ObjectController)::Index returns 404 when no data is found" class="Tests\Unit\Http\Controllers\ObjectControllerTest" classname="Tests.Unit.Http.Controllers.ObjectControllerTest" assertions="2" time="0.405867"/>
        <testcase name="Store creates new object successfully" file="Object Controller (Tests\Unit\Http\Controllers\ObjectController)::Store creates new object successfully" class="Tests\Unit\Http\Controllers\ObjectControllerTest" classname="Tests.Unit.Http.Controllers.ObjectControllerTest" assertions="2" time="0.524158"/>
        <testcase name="Store returns validation error for invalid data" file="Object Controller (Tests\Unit\Http\Controllers\ObjectController)::Store returns validation error for invalid data" class="Tests\Unit\Http\Controllers\ObjectControllerTest" classname="Tests.Unit.Http.Controllers.ObjectControllerTest" assertions="3" time="0.450045"/>
        <testcase name="Show returns specific object data successfully" file="Object Controller (Tests\Unit\Http\Controllers\ObjectController)::Show returns specific object data successfully" class="Tests\Unit\Http\Controllers\ObjectControllerTest" classname="Tests.Unit.Http.Controllers.ObjectControllerTest" assertions="2" time="0.391858"/>
        <testcase name="Show returns specific object data with timestamp successfully" file="Object Controller (Tests\Unit\Http\Controllers\ObjectController)::Show returns specific object data with timestamp successfully" class="Tests\Unit\Http\Controllers\ObjectControllerTest" classname="Tests.Unit.Http.Controllers.ObjectControllerTest" assertions="2" time="0.400972"/>
        <testcase name="Show returns 404 when specific object data not found" file="Object Controller (Tests\Unit\Http\Controllers\ObjectController)::Show returns 404 when specific object data not found" class="Tests\Unit\Http\Controllers\ObjectControllerTest" classname="Tests.Unit.Http.Controllers.ObjectControllerTest" assertions="2" time="0.404361"/>
      </testsuite>
      <testsuite name="Tests\Integration\Repositories\ObjectRepositoryTest" file="Object Repository (Tests\Integration\Repositories\ObjectRepository)" tests="6" assertions="11" errors="0" failures="0" skipped="0" time="2.783266">
        <testcase name="Get all returns all objects" file="Object Repository (Tests\Integration\Repositories\ObjectRepository)::Get all returns all objects" class="Tests\Integration\Repositories\ObjectRepositoryTest" classname="Tests.Integration.Repositories.ObjectRepositoryTest" assertions="1" time="0.923864"/>
        <testcase name="Create stores a new object in the database" file="Object Repository (Tests\Integration\Repositories\ObjectRepository)::Create stores a new object in the database" class="Tests\Integration\Repositories\ObjectRepositoryTest" classname="Tests.Integration.Repositories.ObjectRepositoryTest" assertions="2" time="0.385228"/>
        <testcase name="Find by key with query finds the value object" file="Object Repository (Tests\Integration\Repositories\ObjectRepository)::Find by key with query finds the value object" class="Tests\Integration\Repositories\ObjectRepositoryTest" classname="Tests.Integration.Repositories.ObjectRepositoryTest" assertions="2" time="0.370799"/>
        <testcase name="Find by key with query finds the latest value object" file="Object Repository (Tests\Integration\Repositories\ObjectRepository)::Find by key with query finds the latest value object" class="Tests\Integration\Repositories\ObjectRepositoryTest" classname="Tests.Integration.Repositories.ObjectRepositoryTest" assertions="3" time="0.401914"/>
        <testcase name="Find by key with query timestamp finds the value object" file="Object Repository (Tests\Integration\Repositories\ObjectRepository)::Find by key with query timestamp finds the value object" class="Tests\Integration\Repositories\ObjectRepositoryTest" classname="Tests.Integration.Repositories.ObjectRepositoryTest" assertions="2" time="0.336692"/>
        <testcase name="Find by id with query returns null for nonexistent key" file="Object Repository (Tests\Integration\Repositories\ObjectRepository)::Find by id with query returns null for nonexistent key" class="Tests\Integration\Repositories\ObjectRepositoryTest" classname="Tests.Integration.Repositories.ObjectRepositoryTest" assertions="1" time="0.364769"/>
      </testsuite>
      <testsuite name="Tests\Unit\Services\ObjectServicesTest" file="Object Services (Tests\Unit\Services\ObjectServices)" tests="6" assertions="9" errors="0" failures="0" skipped="0" time="2.307257">
        <testcase name="All returns collection from repository" file="Object Services (Tests\Unit\Services\ObjectServices)::All returns collection from repository" class="Tests\Unit\Services\ObjectServicesTest" classname="Tests.Unit.Services.ObjectServicesTest" assertions="2" time="0.363734"/>
        <testcase name="All returns empty collection if repository returns null" file="Object Services (Tests\Unit\Services\ObjectServices)::All returns empty collection if repository returns null" class="Tests\Unit\Services\ObjectServicesTest" classname="Tests.Unit.Services.ObjectServicesTest" assertions="2" time="0.338474"/>
        <testcase name="Store creates data and returns formatted timestamp" file="Object Services (Tests\Unit\Services\ObjectServices)::Store creates data and returns formatted timestamp" class="Tests\Unit\Services\ObjectServicesTest" classname="Tests.Unit.Services.ObjectServicesTest" assertions="2" time="0.507618"/>
        <testcase name="Find returns value object string from repository" file="Object Services (Tests\Unit\Services\ObjectServices)::Find returns value object string from repository" class="Tests\Unit\Services\ObjectServicesTest" classname="Tests.Unit.Services.ObjectServicesTest" assertions="1" time="0.389584"/>
        <testcase name="Find returns value object json from repository" file="Object Services (Tests\Unit\Services\ObjectServices)::Find returns value object json from repository" class="Tests\Unit\Services\ObjectServicesTest" classname="Tests.Unit.Services.ObjectServicesTest" assertions="1" time="0.346275"/>
        <testcase name="Find returns null when version not found" file="Object Services (Tests\Unit\Services\ObjectServices)::Find returns null when version not found" class="Tests\Unit\Services\ObjectServicesTest" classname="Tests.Unit.Services.ObjectServicesTest" assertions="1" time="0.361570"/>
      </testsuite>
      <testsuite name="Tests\Unit\Traits\ResponseTraitTest" file="Response Trait (Tests\Unit\Traits\ResponseTrait)" tests="3" assertions="7" errors="0" failures="0" skipped="0" time="1.345404">
        <testcase name="Success method returns a valid json response" file="Response Trait (Tests\Unit\Traits\ResponseTrait)::Success method returns a valid json response" class="Tests\Unit\Traits\ResponseTraitTest" classname="Tests.Unit.Traits.ResponseTraitTest" assertions="3" time="0.463322"/>
        <testcase name="Success method uses default status code of 200" file="Response Trait (Tests\Unit\Traits\ResponseTrait)::Success method uses default status code of 200" class="Tests\Unit\Traits\ResponseTraitTest" classname="Tests.Unit.Traits.ResponseTraitTest" assertions="1" time="0.447711"/>
        <testcase name="Error method returns a valid json response" file="Response Trait (Tests\Unit\Traits\ResponseTrait)::Error method returns a valid json response" class="Tests\Unit\Traits\ResponseTraitTest" classname="Tests.Unit.Traits.ResponseTraitTest" assertions="3" time="0.434371"/>
      </testsuite>
      <testsuite name="Tests\Unit\Data\StoreObjectDataTest" file="Store Object Data (Tests\Unit\Data\StoreObjectData)" tests="5" assertions="9" errors="0" failures="0" skipped="0" time="2.196169">
        <testcase name="It can be instantiated from an array with valid string data" file="Store Object Data (Tests\Unit\Data\StoreObjectData)::It can be instantiated from an array with valid string data" class="Tests\Unit\Data\StoreObjectDataTest" classname="Tests.Unit.Data.StoreObjectDataTest" assertions="3" time="0.429233"/>
        <testcase name="It can be instantiated with a json string value" file="Store Object Data (Tests\Unit\Data\StoreObjectData)::It can be instantiated with a json string value" class="Tests\Unit\Data\StoreObjectDataTest" classname="Tests.Unit.Data.StoreObjectDataTest" assertions="3" time="0.475628"/>
        <testcase name="ToArray method returns correct data" file="Store Object Data (Tests\Unit\Data\StoreObjectData)::ToArray method returns correct data" class="Tests\Unit\Data\StoreObjectDataTest" classname="Tests.Unit.Data.StoreObjectDataTest" assertions="1" time="0.398225"/>
        <testcase name="It throws validation exception if key is missing" file="Store Object Data (Tests\Unit\Data\StoreObjectData)::It throws validation exception if key is missing" class="Tests\Unit\Data\StoreObjectDataTest" classname="Tests.Unit.Data.StoreObjectDataTest" assertions="1" time="0.433936"/>
        <testcase name="It throws validation exception if value is missing" file="Store Object Data (Tests\Unit\Data\StoreObjectData)::It throws validation exception if value is missing" class="Tests\Unit\Data\StoreObjectDataTest" classname="Tests.Unit.Data.StoreObjectDataTest" assertions="1" time="0.459149"/>
      </testsuite>
      <testsuite name="Tests\Unit\Helper\UnixTimestampFormatterTest" file="Unix Timestamp Formatter (Tests\Unit\Helper\UnixTimestampFormatter)" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="1.024417">
        <testcase name="It converts timestamp to default format" file="Unix Timestamp Formatter (Tests\Unit\Helper\UnixTimestampFormatter)::It converts timestamp to default format" class="Tests\Unit\Helper\UnixTimestampFormatterTest" classname="Tests.Unit.Helper.UnixTimestampFormatterTest" assertions="1" time="0.550298"/>
        <testcase name="It converts timestamp to a custom format" file="Unix Timestamp Formatter (Tests\Unit\Helper\UnixTimestampFormatter)::It converts timestamp to a custom format" class="Tests\Unit\Helper\UnixTimestampFormatterTest" classname="Tests.Unit.Helper.UnixTimestampFormatterTest" assertions="1" time="0.474119"/>
      </testsuite>
    </testsuite>
    <testsuite name="Feature" tests="12" assertions="36" errors="0" failures="0" skipped="0" time="4.972087">
      <testsuite name="Tests\Feature\ObjectApiTest" file="Object Api (Tests\Feature\ObjectApi)" tests="12" assertions="36" errors="0" failures="0" skipped="0" time="4.972087">
        <testcase name="It can store a new object with a string value" file="Object Api (Tests\Feature\ObjectApi)::It can store a new object with a string value" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="3" time="0.459162"/>
        <testcase name="It can store a new object with a json value" file="Object Api (Tests\Feature\ObjectApi)::It can store a new object with a json value" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="3" time="0.416733"/>
        <testcase name="It can store a new object with a array value" file="Object Api (Tests\Feature\ObjectApi)::It can store a new object with a array value" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="3" time="0.423815"/>
        <testcase name="It fails to store if body has more than one key" file="Object Api (Tests\Feature\ObjectApi)::It fails to store if body has more than one key" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="3" time="0.421832"/>
        <testcase name="It fails to store if key already exist" file="Object Api (Tests\Feature\ObjectApi)::It fails to store if key already exist" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="3" time="0.394547"/>
        <testcase name="It returns a validation error for an invalid payload" file="Object Api (Tests\Feature\ObjectApi)::It returns a validation error for an invalid payload" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="3" time="0.439969"/>
        <testcase name="It can get the object for a key" file="Object Api (Tests\Feature\ObjectApi)::It can get the object for a key" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="2" time="0.388286"/>
        <testcase name="It can get the object for a key and timestamp" file="Object Api (Tests\Feature\ObjectApi)::It can get the object for a key and timestamp" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="2" time="0.432604"/>
        <testcase name="It can get the object for a key and invalid timestamp" file="Object Api (Tests\Feature\ObjectApi)::It can get the object for a key and invalid timestamp" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="1" time="0.415814"/>
        <testcase name="It returns 404 if no object is found for a key" file="Object Api (Tests\Feature\ObjectApi)::It returns 404 if no object is found for a key" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="1" time="0.409645"/>
        <testcase name="It can get all object records" file="Object Api (Tests\Feature\ObjectApi)::It can get all object records" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="11" time="0.397608"/>
        <testcase name="It can not found if there are no records" file="Object Api (Tests\Feature\ObjectApi)::It can not found if there are no records" class="Tests\Feature\ObjectApiTest" classname="Tests.Feature.ObjectApiTest" assertions="1" time="0.372071"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
